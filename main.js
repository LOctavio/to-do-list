(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,"ul {\n  list-style-type: none;\n  width: 400px;\n  margin: 0 auto;\n  box-shadow: rgba(100, 100, 111, 0.2) 0 7px 29px 0;\n  padding: 0 0 50px 0;\n  position: relative;\n}\n\nli {\n  border-top: 1px solid #ebebeb;\n  height: 50px;\n  width: inherit;\n  position: relative;\n}\n\n#add-task {\n  width: 335px;\n  height: 100%;\n  border: 0;\n  padding: 0 50px 0 15px;\n  background-color: #ebebeb;\n  font-style: italic;\n}\n\n#add-task:focus {\n  outline: none;\n}\n\n#add-button {\n  position: absolute;\n  right: 0;\n  border: 0;\n  width: 50px;\n  height: 100%;\n  background-color: #ebebeb;\n}\n\n.tasks input {\n  margin: 15px;\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  left: 0;\n}\n\n.tasks label {\n  display: inline-block;\n  width: 300px;\n  height: 48px;\n  line-height: 48px;\n  padding: 0 50px;\n}\n\n.tasks img {\n  position: absolute;\n  right: 0;\n  width: 20px;\n  height: 20px;\n  margin: 15px;\n}\n\n#title {\n  display: inline-block;\n  width: 335px;\n  padding-right: 50px;\n  padding-left: 15px;\n  height: inherit;\n  line-height: 50px;\n}\n\n#refresh-icon {\n  position: absolute;\n  right: 0;\n  padding: 15px;\n  width: 20px;\n  height: 20px;\n}\n\n#clear-complete {\n  position: absolute;\n  bottom: 0;\n}\n\n#clear-complete button {\n  height: inherit;\n  width: inherit;\n  color: rgb(123, 123, 123);\n  background-color: rgb(246, 246, 246);\n  border: 0;\n  padding: 0;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,YAAY;EACZ,cAAc;EACd,iDAAiD;EACjD,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,SAAS;EACT,sBAAsB;EACtB,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,OAAO;AACT;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,aAAa;EACb,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,SAAS;AACX;;AAEA;EACE,eAAe;EACf,cAAc;EACd,yBAAyB;EACzB,oCAAoC;EACpC,SAAS;EACT,UAAU;AACZ",sourcesContent:["ul {\n  list-style-type: none;\n  width: 400px;\n  margin: 0 auto;\n  box-shadow: rgba(100, 100, 111, 0.2) 0 7px 29px 0;\n  padding: 0 0 50px 0;\n  position: relative;\n}\n\nli {\n  border-top: 1px solid #ebebeb;\n  height: 50px;\n  width: inherit;\n  position: relative;\n}\n\n#add-task {\n  width: 335px;\n  height: 100%;\n  border: 0;\n  padding: 0 50px 0 15px;\n  background-color: #ebebeb;\n  font-style: italic;\n}\n\n#add-task:focus {\n  outline: none;\n}\n\n#add-button {\n  position: absolute;\n  right: 0;\n  border: 0;\n  width: 50px;\n  height: 100%;\n  background-color: #ebebeb;\n}\n\n.tasks input {\n  margin: 15px;\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  left: 0;\n}\n\n.tasks label {\n  display: inline-block;\n  width: 300px;\n  height: 48px;\n  line-height: 48px;\n  padding: 0 50px;\n}\n\n.tasks img {\n  position: absolute;\n  right: 0;\n  width: 20px;\n  height: 20px;\n  margin: 15px;\n}\n\n#title {\n  display: inline-block;\n  width: 335px;\n  padding-right: 50px;\n  padding-left: 15px;\n  height: inherit;\n  line-height: 50px;\n}\n\n#refresh-icon {\n  position: absolute;\n  right: 0;\n  padding: 15px;\n  width: 20px;\n  height: 20px;\n}\n\n#clear-complete {\n  position: absolute;\n  bottom: 0;\n}\n\n#clear-complete button {\n  height: inherit;\n  width: inherit;\n  color: rgb(123, 123, 123);\n  background-color: rgb(246, 246, 246);\n  border: 0;\n  padding: 0;\n}\n"],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);r&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,i=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,i,o=[],a=!0,A=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(o.push(r.value),!e||o.length!==e);a=!0);}catch(n){A=!0,i=n}finally{try{a||null==t.return||t.return()}finally{if(A)throw i}}return o}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),s="/*# ".concat(c," */"),d=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(d).concat([s]).join("\n")}return[o].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],A=0;A<n.length;A++){var c=n[A],s=r.base?c[0]+r.base:c[0],d=o[s]||0,l="".concat(s," ").concat(d);o[s]=d+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(u)):e.push({identifier:l,updater:i(u,r),references:1}),a.push(l)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var A=t(o[a]);e[A].references--}for(var c=r(n,i),s=0;s<o.length;s++){var d=t(o[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,i=t.media,o=t.sourceMap;i?n.setAttribute("media",i):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},659:(n,e,t)=>{n.exports=t.p+"a5aaafc7324141569da4.svg"},979:(n,e,t)=>{n.exports=t.p+"abaa8f9a908f59d94c2b.svg"},745:(n,e,t)=>{n.exports=t.p+"c795f4c16c886a041cbb.svg"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{var n=t(745),e=t(979),r=t(659),i=t(379),o=t.n(i),a=t(795),A=t.n(a),c=t(569),s=t.n(c),d=t(565),l=t.n(d),p=t(216),u=t.n(p),h=t(589),b=t.n(h),f=t(426),g={};let E;function m(n){E=n}function C(n,e){n.insertBefore(E,e.target.parentElement)}g.styleTagTransform=b(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=A(),g.insertStyleElement=u(),o()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;const x=[];class v{constructor(n,e,t=!1){this.description=n,this.completed=t,this.index=e}}const B=e=>{const t=document.querySelector("ul"),r=document.createElement("li");r.setAttribute("draggable","true"),r.classList.add("tasks"),r.addEventListener("dragstart",(()=>m(r))),r.addEventListener("drop",(n=>C(t,n))),r.addEventListener("dragover",(n=>{n.preventDefault()}));const i=document.createElement("input"),o=document.createElement("label"),a=new Image;a.src=n,i.type="checkbox",o.textContent=e,r.appendChild(i),r.appendChild(o),r.appendChild(a),t.appendChild(r)},y=(n,e)=>{x.push(new v(n,e)),B(n)};window.onload=()=>{(()=>{const n=document.querySelector("ul"),t=document.createElement("li"),i=document.createElement("label"),o=new Image;o.setAttribute("id","refresh-icon"),o.src=r,i.innerHTML="Today's To Do",t.appendChild(i),t.appendChild(o),i.setAttribute("id","title");const a=document.createElement("li"),A=document.createElement("button");A.setAttribute("id","add-button");const c=new Image;c.src=e,A.appendChild(c);const s=document.createElement("input");s.setAttribute("id","add-task"),s.setAttribute("placeholder","Add to your list..."),a.appendChild(s),a.appendChild(A),n.appendChild(t),n.appendChild(a),x.sort(((n,e)=>n.index>e.index?1:-1)),x.forEach((n=>{B(n.description)}));const d=document.createElement("li");d.setAttribute("id","clear-complete");const l=document.createElement("button");l.textContent="Clear all completed",d.appendChild(l),n.appendChild(d)})(),document.querySelector("#add-button").addEventListener("click",(()=>{const n=document.querySelector("#add-task");y(n.value,x.length+1),n.value=""})),y("Buy eggs",2),y("Wash the dishes",1),y("Feed cats",1)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,