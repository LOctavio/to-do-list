(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var r=e(15),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"ul {\n    list-style-type: none;\n    width: 400px;\n    margin: 0 auto;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    padding: 0;\n}\n\nli {\n    border-top: 1px solid #ebebeb;\n    height: 50px;\n    position: relative;\n}\n\n#add-task {\n    width: 335px;\n    height: 100%;\n    border: 0;\n    padding: 0 50px 0 15px;\n    background-color: #ebebeb;\n    font-style: italic;\n}\n\n#add-task:focus {\n    outline: none;  \n}\n\n#add-button {\n    position: absolute;\n    right: 0;\n    border: 0;\n    width: 50px;\n    height: 100%;\n    background-color: #ebebeb;\n}\n\n.tasks input {\n    margin: 15px;\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    left: 0;\n}\n\n.tasks label {\n    display: inline-block;\n    width: 300px;\n    height: 48px;\n    line-height: 48px;\n    padding: 0 50px;\n}\n\n.tasks img {\n    position: absolute;\n    right: 0;\n    width: 20px;\n    height: 20px;\n    margin: 15px;\n}\n\n#title {\n    display: inline-block;\n    width: 335px;\n    padding-right: 50px;\n    padding-left: 15px;\n    height: inherit;\n    line-height: 50px;\n}\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,YAAY;IACZ,cAAc;IACd,qDAAqD;IACrD,UAAU;AACd;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,SAAS;IACT,sBAAsB;IACtB,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,OAAO;AACX;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;IAClB,eAAe;IACf,iBAAiB;AACrB",sourcesContent:["ul {\n    list-style-type: none;\n    width: 400px;\n    margin: 0 auto;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    padding: 0;\n}\n\nli {\n    border-top: 1px solid #ebebeb;\n    height: 50px;\n    position: relative;\n}\n\n#add-task {\n    width: 335px;\n    height: 100%;\n    border: 0;\n    padding: 0 50px 0 15px;\n    background-color: #ebebeb;\n    font-style: italic;\n}\n\n#add-task:focus {\n    outline: none;  \n}\n\n#add-button {\n    position: absolute;\n    right: 0;\n    border: 0;\n    width: 50px;\n    height: 100%;\n    background-color: #ebebeb;\n}\n\n.tasks input {\n    margin: 15px;\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    left: 0;\n}\n\n.tasks label {\n    display: inline-block;\n    width: 300px;\n    height: 48px;\n    line-height: 48px;\n    padding: 0 50px;\n}\n\n.tasks img {\n    position: absolute;\n    right: 0;\n    width: 20px;\n    height: 20px;\n    margin: 15px;\n}\n\n#title {\n    display: inline-block;\n    width: 335px;\n    padding-right: 50px;\n    padding-left: 15px;\n    height: inherit;\n    line-height: 50px;\n}\n\n\n"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);r&&i[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,i=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,i,o=[],a=!0,c=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(n){c=!0,i=n}finally{try{a||null==e.return||e.return()}finally{if(c)throw i}}return o}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),d=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(d).concat([l]).join("\n")}return[o].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],d=o[l]||0,p="".concat(l," ").concat(d);o[l]=d+1;var A=e(p),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(t[A].references++,t[A].updater(u)):t.push({identifier:p,updater:i(u,r),references:1}),a.push(p)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var c=e(o[a]);t[c].references--}for(var s=r(n,i),l=0;l<o.length;l++){var d=e(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,i=e.media,o=e.sourceMap;i?n.setAttribute("media",i):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},979:(n,t,e)=>{n.exports=e.p+"abaa8f9a908f59d94c2b.svg"},745:(n,t,e)=>{n.exports=e.p+"c795f4c16c886a041cbb.svg"}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),(()=>{var n=e(745),t=e(979),r=e(379),i=e.n(r),o=e(795),a=e.n(o),c=e(569),s=e.n(c),l=e(565),d=e.n(l),p=e(216),A=e.n(p),u=e(589),h=e.n(u),f=e(426),b={};b.styleTagTransform=h(),b.setAttributes=d(),b.insert=s().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=A(),i()(f.Z,b),f.Z&&f.Z.locals&&f.Z.locals;const g=[];class m{constructor(n,t,e=!1){this.description=n,this.completed=e,this.index=t}}const x=t=>{const e=document.querySelector("ul"),r=document.createElement("li");r.classList.add("tasks");const i=document.createElement("input"),o=document.createElement("label"),a=new Image;a.src=n,i.type="checkbox",o.textContent=t,r.appendChild(i),r.appendChild(o),r.appendChild(a),e.appendChild(r)},C=(n,t)=>{g.push(new m(n,t)),x(n)};window.onload=()=>{(()=>{const n=document.querySelector("ul"),e=document.createElement("li"),r=document.createElement("label");r.innerHTML="Today's To Do",e.appendChild(r),r.setAttribute("id","title");const i=document.createElement("li"),o=document.createElement("button");o.setAttribute("id","add-button");const a=new Image;a.src=t,o.appendChild(a);const c=document.createElement("input");c.setAttribute("id","add-task"),c.setAttribute("placeholder","Add to your list..."),i.appendChild(c),i.appendChild(o),n.appendChild(e),n.appendChild(i),g.sort(((n,t)=>n.index>t.index?1:-1)),g.forEach((n=>{x(n.description)}))})(),document.querySelector("#add-button").addEventListener("click",(()=>{const n=document.querySelector("#add-task");C(n.value,g.length+1),n.value=""}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,